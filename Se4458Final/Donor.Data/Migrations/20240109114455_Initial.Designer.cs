// <auto-generated />
using System;
using Donor.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Donor.Data.Migrations
{
    [DbContext(typeof(DonorDBContext))]
    [Migration("20240109114455_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Donor.Data.Models.Branch", b =>
                {
                    b.Property<int>("BranchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("branch_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchID"));

                    b.Property<int>("AMinusBlood")
                        .HasColumnType("int")
                        .HasColumnName("a_minus_blood");

                    b.Property<int>("APlusBlood")
                        .HasColumnType("int")
                        .HasColumnName("a_plus_blood");

                    b.Property<int>("AbMinusBlood")
                        .HasColumnType("int")
                        .HasColumnName("ab_minus_blood");

                    b.Property<int>("AbPlusBlood")
                        .HasColumnType("int")
                        .HasColumnName("ab_plus_blood");

                    b.Property<int>("BMinusBlood")
                        .HasColumnType("int")
                        .HasColumnName("b_minus_blood");

                    b.Property<int>("BPlusBlood")
                        .HasColumnType("int")
                        .HasColumnName("b_plus_blood");

                    b.Property<int>("City")
                        .HasColumnType("int")
                        .HasColumnName("city");

                    b.Property<int>("GeopointID")
                        .HasColumnType("int")
                        .HasColumnName("geopoint_id");

                    b.Property<int>("Town")
                        .HasColumnType("int")
                        .HasColumnName("town");

                    b.Property<int>("ZeroMinusBlood")
                        .HasColumnType("int")
                        .HasColumnName("zero_minus_blood");

                    b.Property<int>("ZeroPlusBlood")
                        .HasColumnType("int")
                        .HasColumnName("zero_plus_blood");

                    b.HasKey("BranchID");

                    b.ToTable("branch", (string)null);
                });

            modelBuilder.Entity("Donor.Data.Models.DonationHistory", b =>
                {
                    b.Property<int>("HistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("history_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryID"));

                    b.Property<DateTime>("DonationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("donation_time");

                    b.Property<int>("DonorID")
                        .HasColumnType("int")
                        .HasColumnName("donor_id");

                    b.Property<int>("TupleNumber")
                        .HasColumnType("int")
                        .HasColumnName("tuple_count");

                    b.HasKey("HistoryID");

                    b.HasIndex("DonorID");

                    b.ToTable("donation_history", (string)null);
                });

            modelBuilder.Entity("Donor.Data.Models.Donor", b =>
                {
                    b.Property<int>("DonorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("donor_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DonorID"));

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("blood_type");

                    b.Property<int>("BranchID")
                        .HasColumnType("int")
                        .HasColumnName("branch_id");

                    b.Property<int>("City")
                        .HasColumnType("int")
                        .HasColumnName("city");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("phonenumber");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("surname");

                    b.Property<int>("Town")
                        .HasColumnType("int")
                        .HasColumnName("town");

                    b.HasKey("DonorID");

                    b.HasIndex("BranchID");

                    b.ToTable("donor", (string)null);
                });

            modelBuilder.Entity("Donor.Data.Models.DonationHistory", b =>
                {
                    b.HasOne("Donor.Data.Models.Donor", "Donor")
                        .WithMany("DonationHistories")
                        .HasForeignKey("DonorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("Donor.Data.Models.Donor", b =>
                {
                    b.HasOne("Donor.Data.Models.Branch", "Branch")
                        .WithMany("Donors")
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Donor.Data.Models.Branch", b =>
                {
                    b.Navigation("Donors");
                });

            modelBuilder.Entity("Donor.Data.Models.Donor", b =>
                {
                    b.Navigation("DonationHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
